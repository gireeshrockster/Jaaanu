NAME:G.V.AKASH NAIDU
ROLL NO:2273A05181
SECTION:MAC

PROGRAM:Binary search tree insert,delete and search operations

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct Node{
	int data;
	struct Node* right;
	struct Node* left;
};
struct Node* createNode(int value){
	struct Node*newNode=(struct Node*)malloc(sizeof(struct Node));
	newNode->data=value;
	newNode->left=NULL;
	newNode->right=NULL;
	return newNode;
}
struct Node* insert(struct Node* root,int value){
	if(root==NULL){
		return createNode(value);
	}
	if(value<root->data){
		root->left=insert(root->left,value);
	}else{
		root->right=insert(root->right,value);
	}
	return root;
}
struct Node* minvalueNode(struct Node* node){
	struct Node* current=node;
	while(current&&current->left!=NULL){
		current=current->left;
	}
	return current;
}
struct Node* deleteNode(struct Node* root,int value){
	if(root==NULL)
	   return root;
	if(value<root->data){
		root->left=deleteNode(root->left,value);
	}
	else if(value>root->data){
		root->right=deleteNode(root->right,value);
	}else{
		if(root->left==NULL){
			struct Node* temp=root->right;
			free(root);
			return temp;
		}else if(root->right==NULL){
			struct Node* temp=root->left;
			free(root);
			return temp;
		}
		struct Node* temp=minvalueNode(root->right);
		root->data=temp->data;
		root->right=deleteNode(root->right,temp->data);
	}
	return root;
}
struct Node* search(struct Node* root,int value){
	if(root==NULL||root->data==value){
		return root;
	}
	if(value<root->data){
		return search(root->left,value);                                     
	}
	return search(root->right,value);
}
void inorderTraversal(struct Node*root){
	if(root==NULL)
	   return ;
	inorderTraversal(root->left);
	printf("%d\t",root->data);
	inorderTraversal(root->right);
}
int main(){
	struct Node* root=NULL;
		root=insert(root,50);
		insert(root,30);
		insert(root,20);
		insert(root,40);
		insert(root,70);
		insert(root,60);
		insert(root,80);
		printf("Binary search Tree operations:\n");
		int searchValue=40;
		printf("\nElements after inserting:\t");
		inorderTraversal(root);
		printf("\n");
		printf("\nSearching operation:\n");
		if(search(root,searchValue)!=NULL){
			printf("%d found in the tree",searchValue);
		}else{
			printf("%d not found in the tree",searchValue);
		}
		int deleteValue=30;
		root=deleteNode(root,deleteValue);
		printf("\n\nDeleted %d from the tree",deleteValue);
		printf("\nThe elements after deleting=\t");
		inorderTraversal(root);
		return 0;
}


OUTPUT:

Binary search Tree operations:

Elements after inserting:	20	30	40	50	60	70	80	

Searching operation:
40 found in the tree

Deleted 30 from the tree
The elements after deleting=	20	40	50	60	70	80	
